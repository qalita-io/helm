licenseUser: "unlicenced"
licenseKey: "unlicenced"
licenseUrl: qalita.azurecr.io

cluster:
  issuer: letsencrypt-prod
  domain: example.com
  name: local

dockerregistry:
  enabled: true

frontend:
  image:
    repository: qalita.azurecr.io/qalita/frontend
    tag: "2.1.4"
    pullPolicy: IfNotPresent

  replicaCount: 1

  telemetryDisabled: "1"
  webPackPolling: "false"
  mode: "production"

  service:
    type: ClusterIP
    targetPort: "3000"
    protocol: TCP

  ingress:
    enabled: true
    tls:
      enabled: true

  deployment:
    resources:
      requests:
        memory: "50Mi"
        cpu: "50m"

    extraEnv:

doc:
  image:
    repository: qalita.azurecr.io/qalita/doc
    tag: "2.1.3"
    pullPolicy: IfNotPresent

  replicaCount: 1

  service:
    type: ClusterIP
    targetPort: "80"
    protocol: TCP

  ingress:
    enabled: true
    tls:
      enabled: true

  deployment:
    resources:
      requests:
        memory: "50Mi"
        cpu: "50m"

backend:
  image:
    repository: qalita.azurecr.io/qalita/backend
    tag: "2.1.4"
    pullPolicy: IfNotPresent

  replicaCount: 1

  organization:
    name: "local"

  RetentionLogsHours: 720
  AUTHTokenExpireMinutes: 240
  APItokenExpireMinutes: 525600
  mode: "PROD"
  iniSleep: "3"

  authMode: "table"
  adminUsername: "admin"
  adminPassword:
  secretKey:
  secretKeyAlgorithm: "HS256"

  mail:
    enabled: false
    username: ""
    password: ""
    from: "no-reply@example.com"
    from_name: "QALITA Platform"
    port: 1025
    server: ""
    starttls: false
    ssl_tls: false

  s3:
    url: "http://seaweedfs-s3:8333"
    secretName: seaweedfs-s3-secret
    admin_access_key_id: ""
    admin_secret_access_key: ""
    read_access_key_id: ""
    read_secret_access_key: ""

  api:
    port: "3080"
    host: "0.0.0.0"
    worker: 4

  service:
    type: ClusterIP
    targetPort: "3080"
    protocol: TCP

  ingress:
    enabled: true
    tls:
      enabled: true

  deployment:
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"

    extraEnv:

agent:
  enabled: false
  privileged: false
  name: "local-agent"
  mode: "worker"
  token: "changeme"

  image:
    repository: qalita/agent
    tag: "2.0.0-db"
    pullPolicy: IfNotPresent

  replicaCount: 1

  pvc:
    enabled: false
    storageSize: "10Gi"

  initscript: |
    #!/bin/bash
    echo "Hello World"

  deployment:
    resources:
      requests:
        memory: "50Mi"
        cpu: "10m"

    extraEnv:

postgresql:
  enabled: true
  image:
    registry: qalita.azurecr.io
    repository: postgresql
    pullSecrets:
      - "qalita-platform-dockerregistry"
    tag: "15.4.0"

  global:
    postgresql:
      auth:
        database: qalitadb
        username: qalita
        password:

  primary:
    persistence:
      size: 8Gi

  backup:
    enabled: false
    cronjob:
      storage:
        resourcePolicy: "keep"

redis:
  enabled: true
  image:
    registry: qalita.azurecr.io
    repository: redis
    tag: "7.4.2"
    pullSecrets:
      - "qalita-platform-dockerregistry"
  architecture: standalone
  auth:
    usePasswordFiles: true
    existingSecret: "qalita-rediscreds"

  master:
    persistence:
      enabled: false

seaweedfs:
  enabled: true

  global:
    createClusterRole: true
    serviceAccountName: "seaweedfs"
    registry: qalita.azurecr.io
    repository: qalita.azurecr.io/seaweedfs
    imagePullSecrets: "qalita-platform-dockerregistry"
    imageName: seaweedfs

  s3:
    enabled: true
    enableAuth: true
    existingConfigSecret: "seaweedfs-s3-secret"

  filer:
    data:
      type: "persistentVolumeClaim"
      size: "4Gi"

    s3:
      enabled: true
      enableAuth: true
      existingConfigSecret: "seaweedfs-s3-secret"

    resources:
      requests:
        memory: "100Mi"
        cpu: "50m"

  volume:
    dataDirs:
      - name: data1
        type: "persistentVolumeClaim"
        size: "32Gi"
        maxVolumes: 0

    resources:
      requests:
        memory: "100Mi"
        cpu: "50m"

  master:
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"

helmsync:
  enabled: false
  image:
    repository: alpine/helm

  kubeconfig: |-
    apiVersion: v1
    kind: Config
    clusters:
    - name: "<kubernetes_cluster_name>"
      cluster:
        server: "<kubernetes_api_server_url>"
    users:
    - name: "<kubernetes_cluster_name>-user"
      user:
        token: "<kubernetes_cluster_token>"
    contexts:
    - name: "<kubernetes_cluster_name>-context"
      context:
        user: "<kubernetes_cluster_name>-user"
        cluster: "<kubernetes_cluster_name>"
    current-context: "<kubernetes_cluster_name>-context"

  resources:
    requests:
      memory: "50Mi"
      cpu: "10m"
